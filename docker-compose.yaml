version: '2.1'

services:
  mail-sender:
    image: mail-sender:latest
    build:
      context: mail-sender
      dockerfile: ../mail-sender/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: "no"
    ports:
      - "8081:8081"
    depends_on:
      - kafka
  mail-registry:
    image: mail-registry:latest
    build:
      context: mail-registry
      dockerfile: ../mail-registry/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: "no"
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - postgres
      - redis

  postgres:
    image: postgres:15.6-alpine
    restart: "no"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mail-registry
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
#      start_period: 10s
      retries: 5

  zookeeper:
    image: zookeeper:3.9.2
    restart: "no"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/data
    healthcheck:
      test: nc -z 127.0.0.1 2181 || exit -1
      interval: 10s
      timeout: 5s
#      start_period: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    restart: "no"
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    healthcheck:
#      test: kafka-topics --bootstrap-server localhost:29092 --list
#      interval: 10s
#      timeout: 5s
##      start_period: 30s
#      retries: 5
    depends_on:
      - zookeeper
    labels:
      amplicode.image: confluent/kafka

  redis:
    image: redis:7.4.0
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
#      start_period: 10s
      retries: 5

volumes:
  postgres_data:
  zookeeper_data:
  kafka_data:
  redis_data: